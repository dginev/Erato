<html>
<head>
<!-- Bootstrap -->
<link href="css/bootstrap.min.css" rel="stylesheet">

<!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
  <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
<![endif]-->
<style>
.centered {
  display: block;
  width: 350px;
  margin-left: auto;
  margin-right: auto;
}
.report tr {height: 20px; text-align: left;}
.report th {height: 20px; text-align: left;}
.loading {
  background:url('img/load.gif') no-repeat center;}
</style>
<script src="js/jquery.min.js"></script>
<script src="js/bootstrap.min.js"></script>
</head>

<body>
<div id="fb-root"></div>
<script>
  window.fbAsyncInit = function() {
  $('#message').text('Initializing Facebook connection... ');
  $("body").css("cursor","progress");
  FB.init({
    appId      : '581889635235526',
    status     : true, // check login status
    cookie     : true, // enable cookies to allow the server to access the session
    xfbml      : true,  // parse XFBML
  });
  $("body").css("cursor","auto");
  FB.login(function(){
    $('#message').text('Logging in Facebook... ');
    $("body").css("cursor","progress");},
   {scope: 'user_likes'});
  $("body").css("cursor","auto");
  // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
  // for any authentication related change, such as login, logout or session refresh. This means that
  // whenever someone who was previously logged out tries to log in again, the correct case below 
  // will be handled. 
  FB.Event.subscribe('auth.authResponseChange', function(response) {
    // Here we specify what we do with the response anytime this event occurs. 
    if (response.status === 'connected') {
      // The response object is returned with a status field that lets the app know the current
      // login status of the person. In this case, we're handling the situation where they 
      // have logged in to the app.
      retrieveMusic();
    } else if (response.status === 'not_authorized') {
      // In this case, the person is logged into Facebook, but not into the app, so we call
      // FB.login() to prompt them to do so. 
      // In real-life usage, you wouldn't want to immediately prompt someone to login 
      // like this, for two reasons:
      // (1) JavaScript created popup windows are blocked by most browsers unless they 
      // result from direct interaction from people using the app (such as a mouse click)
      // (2) it is a bad experience to be continually prompted to login upon page load.
      FB.login(function(){}, {scope: 'user_likes'});
    } else {
      // In this case, the person is not logged into Facebook, so we call the login() 
      // function to prompt them to do so. Note that at this stage there is no indication
      // of whether they are logged into the app. If they aren't then they'll see the Login
      // dialog right after they log in to Facebook. 
      // The same caveats as above apply to the FB.login() call here.
      FB.login(function(){}, {scope: 'user_likes'});
    }
  });
  };

  // Load the SDK asynchronously
  (function(d){
   var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
   if (d.getElementById(id)) {return;}
   js = d.createElement('script'); js.id = '581889635235526'; js.async = true;
   js.src = "//connect.facebook.net/en_US/all.js";
   ref.parentNode.insertBefore(js, ref);
  }(document));

  // Here we run a very simple test of the Graph API after login is successful. 
  // This testAPI() function is only called in those cases. 
  function retrieveMusic() {
    $('#message').text('Welcome!  Fetching your information.... ');
    $("body").css("cursor","progress");

    FB.api('/me/music', function(response) {
      $("body").css("cursor","auto");
      $("#message").text("Music favourites loaded!");
      var names = response.data.map(function(like){return like.name});
      names = names.sort();
      var name_table = "<table class='table table-striped'><thead><th>Aritst</th><th>Score</th></thead><tbody>"
       + names.map(function(name){return '<tr><td>'+name+'</td><td></td></tr>';}).join("\n") + '</tbody></table>';
      $('div.focus').html(name_table);
      $('table tr:gt(1) :nth-child(2)').addClass('loading').animate();

      retrieveScores(names);
      
    });
  };

  function retrieveScores(names) {
    $("#message").text("Retrieving artist scores/facts...");
    var td = [];
    jQuery.each(names, function(index, name) {
      var results_index = index;
      td[results_index] = $('table tr:nth-child('+results_index+') td:nth-child(2)');
      $.post("/analyze", {'name'  : name}, function(response) {
        td[results_index].removeClass('loading');
        td[results_index].text(JSON.stringify(response));
      },"json");
    });
  }
</script>

<div class="row">
        <div class="col-md-2"><p id="message"></p></div>
        <div class="col-md-7"><div class="focus"><img height="150px" src="img/Erato-wikipedia.jpg"></div></div>
        <div class="col-md-3"><div class="fb-login-button" data-max-rows="1" data-size="xlarge" data-show-faces="false" data-auto-logout-link="true"></div></div>
</div>

</body>
</html>