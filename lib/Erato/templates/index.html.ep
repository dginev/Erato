<html>
<head>
<!-- Bootstrap -->
<meta name="viewport" content="width=device-width, initial-scale=1.0">
 <link href="css/bootstrap.min.css" rel="stylesheet" media="screen">
<!-- HTML5 Shim and Respond.js IE8 support of HTML5 elements and media queries -->
<!-- WARNING: Respond.js doesn't work if you view the page via file:// -->
<!--[if lt IE 9]>
  <script src="https://oss.maxcdn.com/libs/html5shiv/3.7.0/html5shiv.js"></script>
  <script src="https://oss.maxcdn.com/libs/respond.js/1.4.2/respond.min.js"></script>
<![endif]-->
<script src="js/jquery.min.js"></script>
<script src="js/bootstrap.min.js"></script>
<style>
@import 'bootstrap.less';
tr.subrow {
  text-align: right;
  font-style: italic;
}
div.rounded {
    .border-radius( 15px );
}
</style>
</head>

<body>
<div id="fb-root"></div>
<script>
  window.fbAsyncInit = function() {
  $('#message').text('Initializing Facebook connection... ');
  $("body").css("cursor","progress");
  FB.init({
    appId      : '581889635235526',
    status     : true, // check login status
    cookie     : true, // enable cookies to allow the server to access the session
    xfbml      : true,  // parse XFBML
  });
  $("body").css("cursor","auto");
  FB.login(function(){
    $('#message').text('Logging in Facebook... ');
    $("body").css("cursor","progress");},
   {scope: 'user_likes,friends_likes'});
  $("body").css("cursor","auto");
  // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
  // for any authentication related change, such as login, logout or session refresh. This means that
  // whenever someone who was previously logged out tries to log in again, the correct case below 
  // will be handled. 
  FB.Event.subscribe('auth.authResponseChange', function(response) {
    // Here we specify what we do with the response anytime this event occurs. 
    if (response.status === 'connected') {
      // The response object is returned with a status field that lets the app know the current
      // login status of the person. In this case, we're handling the situation where they 
      // have logged in to the app.
      retrieveMusic();
    } else if (response.status === 'not_authorized') {
      // In this case, the person is logged into Facebook, but not into the app, so we call
      // FB.login() to prompt them to do so. 
      // In real-life usage, you wouldn't want to immediately prompt someone to login 
      // like this, for two reasons:
      // (1) JavaScript created popup windows are blocked by most browsers unless they 
      // result from direct interaction from people using the app (such as a mouse click)
      // (2) it is a bad experience to be continually prompted to login upon page load.
      FB.login(function(){}, {scope: 'user_likes,friends_likes'});
    } else {
      // In this case, the person is not logged into Facebook, so we call the login() 
      // function to prompt them to do so. Note that at this stage there is no indication
      // of whether they are logged into the app. If they aren't then they'll see the Login
      // dialog right after they log in to Facebook. 
      // The same caveats as above apply to the FB.login() call here.
      FB.login(function(){}, {scope: 'user_likes,friends_likes'});
    }
  });
  };

  // Load the SDK asynchronously
  (function(d){
   var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
   if (d.getElementById(id)) {return;}
   js = d.createElement('script'); js.id = '581889635235526'; js.async = true;
   js.src = "//connect.facebook.net/en_US/all.js";
   ref.parentNode.insertBefore(js, ref);
  }(document));

  // Here we run a very simple test of the Graph API after login is successful. 
  // This testAPI() function is only called in those cases. 
  var reaper = 0;
  function retrieveMusic() {
    if ($('table').length !== 0) {console.log('DONE.');return false;} // Only fetch once per login session
    $('#message').text('Welcome!  Fetching your information.... ');
    $("body").css("cursor","progress");

    FB.api('/me/music', function(response) {
      $("body").css("cursor","auto");
      $("#message").text("Music favourites loaded!");
      var names = response.data.map(function(like){return like.name});
      names = names.sort();
      var name_table = "<table class='table table-striped'><thead><th>Aritst</th>"+
        "<th><span style='color: green;'>Literate</span>/<span style='color: orange;'>Hipster</span>/<span style='color: lightblue;'>Friendly</span><span style='text-align: right; float: right;'>Catchphrases</span></th></thead><tbody>" +
        names.map(function(name){return '<tr><td>'+name+'</td><td></td></tr>';}).join("\n") + '</tbody></table>';
      $('div.focus').html(name_table);
      $('tr').each(function(trid) {$(this).attr('id',trid);});
      $("#message").addClass('loading');
      reaper = 0;
      $("body").css("cursor","progress");
      var name_popularity = retrieveFriendOverlap(names);
      retrieveScores(names,name_popularity);
    });
  };

  function retrieveFriendOverlap(names) {
    var name_popularity = {};
    var friend_count = 1;
    $.each(names, function(index, name) { name_popularity[name]=0; });
    FB.api("me/friends",{
      fields:'id',
      limit:200
    },function(res){
      var l='';
      friend_count = res.data.length || 1;
      $.each(res.data,function(idx,val){
         l=l+val.id+(idx<res.data.length-1?',':'')
      });
      FB.api("music?ids="+l,function(res){
        $.each(res,function(index,friend){
        if (friend.data) {
          var artists = friend.data.map(function(like){return like.name})
          // We need to intersect each of our user's artists with this friends and bump the counter for the intersection:
          $.each(artists,function(aindex,artist) {
            if (artist in name_popularity) {
              name_popularity[artist]++; } });
        }});
        for ( key_name in name_popularity) {
          name_popularity[key_name] /= friend_count;
          // If we are late to the party, set the values from here:
          var bar_td = $('tr td:contains("'+key_name+'")').next();
          bar_td.find('div.progress-bar-info').attr('style','width:'+(name_popularity[key_name]*100)+'%;');
        }
        return name_popularity;
      });
    });
  }

  function retrieveScores(names,name_popularity) {
    $("#message").text("Retrieving artist scores/facts...");
    var td = [];
    var async_lookup = [];
    jQuery.each(names, function(index, name) {
      async_lookup[name] = index;
      td[async_lookup[name]] = $('table tr#'+(async_lookup[name]+1)+' td:nth-child(2)');
      $.post("/analyze", {'name':name, beforeSend:function(xhr){reaper++;}}).done(function(response) {
        var subtable = [];
        reaper--;
        if (reaper <= 0) {
          $('#message').removeClass('loading'); 
          $('#message').text('Completed.');
          $("body").css("cursor","auto"); }
        if (response.length > 0) {
          var score_count = 0;
          var hip_ratio = 0;
          var literate_ratio = 0;
          var trendy_ratio = 0;
          jQuery.each(response, function(songindex, score) {
            var subrow = {};
            if (score.song) { // skip empty songs
              subrow.title = score.song;
              if (score.terms && (score.terms.length > 0)) {
                subrow.terms = score.terms.join('<span style="color: red">; </span>');  }
              else {
                subrow.terms = '';  }
              subtable.push(subrow);
              if (score.hipsterness && score.literacy) {
                hip_ratio += score.hipsterness;
                literate_ratio += score.literacy;
                score_count++;
            }}
          });
          var termed_subtable = $.grep(subtable,function(strow,index) {return (strow.terms && (strow.terms.length>0)); } );
          if (termed_subtable.length > 0) {
            var subtabulated = termed_subtable.map(function(strow){return "<td>"+strow.title+'</td><td>'+strow.terms+'</td>'});
            td[async_lookup[name]].parent().after("<tr class='subrow'>"+subtabulated.join("</tr><tr class='subrow'>")+"</tr>");
          }

          hip_ratio /= score_count; // arithmetic mean
          literate_ratio /= score_count;// arithmetic mean
          hip_ratio = Math.round(hip_ratio * 100); // switch to percentage
          literate_ratio = Math.round(literate_ratio * 100); // switch to percentage
          var pop_ratio;
          if (name_popularity && name_popularity[name]) {pop_ratio = Math.round(name_popularity[name] * 100);}
          else {pop_ratio=0;}
          td[async_lookup[name]].html('<div class="progress">'+
            '<div class="progress-bar progress-bar-success" style="width: '+literate_ratio+'%;"></div>'+
            '<div class="progress-bar progress-bar-warning" style="width: '+hip_ratio+'%;"></div>'+
            '<div class="progress-bar progress-bar-info" style="width: '+pop_ratio+'%;"></div>'+
            '</div>');
          //td[async_lookup[name]].html(hip+', '+literate+', '+'<span style="color: black;">'+titles.join(", ")+'</span>');//', '+trendy+
        } else {
          td[async_lookup[name]].html('n/a');//', '+trendy+
        }
      },"json");
    });
  }
</script>

<div class="row">
        <div class="col-md-1"><p id="message"></p></div>
        <div class="col-md-8 focus">
          <div class="row-fluid">
            <div class="col-md-6 height6"><img class="img-rounded" style="border-radius:25px;" src="img/Erato-wikipedia.jpg"></div>
            <div class="col-md-5 height6" style="vertical-aligh: middle; text-align:left;"><span style="font-family:'New Century Schoolbook'; font-size:100px;">Erato</span><br>
                 <span style="font-family:'New Century Schoolbook'; font-size:30px; font-style:italic;">Discover Poetry in Music</span>
            </div>
          </div>
        </div>
        <div class="col-md-3"><div class="fb-login-button" data-max-rows="1" data-size="xlarge" data-show-faces="false" data-auto-logout-link="true"></div></div>
</div>

</body>
</html>