<html>
<head>
  <style>
.centered {
  display: block;
  width: 150px;
  margin-left: auto;
  margin-right: auto;
}
</style>
<script src="js/external/jquery.min.js"></script>
</head>
<body>
<div id="fb-root"></div>
<script>
  window.fbAsyncInit = function() {
  $('#message').text('Initializing Facebook connection... ');
  $("body").css("cursor","progress");
  FB.init({
    appId      : '581889635235526',
    status     : true, // check login status
    cookie     : true, // enable cookies to allow the server to access the session
    xfbml      : true,  // parse XFBML
  });
  $("body").css("cursor","auto");
  FB.login(function(){
    $('#message').text('Logging in Facebook... ');
    $("body").css("cursor","progress");},
   {scope: 'user_likes'});
  $("body").css("cursor","auto");
  // Here we subscribe to the auth.authResponseChange JavaScript event. This event is fired
  // for any authentication related change, such as login, logout or session refresh. This means that
  // whenever someone who was previously logged out tries to log in again, the correct case below 
  // will be handled. 
  FB.Event.subscribe('auth.authResponseChange', function(response) {
    // Here we specify what we do with the response anytime this event occurs. 
    if (response.status === 'connected') {
      // The response object is returned with a status field that lets the app know the current
      // login status of the person. In this case, we're handling the situation where they 
      // have logged in to the app.
      retrieveMusic();
    } else if (response.status === 'not_authorized') {
      // In this case, the person is logged into Facebook, but not into the app, so we call
      // FB.login() to prompt them to do so. 
      // In real-life usage, you wouldn't want to immediately prompt someone to login 
      // like this, for two reasons:
      // (1) JavaScript created popup windows are blocked by most browsers unless they 
      // result from direct interaction from people using the app (such as a mouse click)
      // (2) it is a bad experience to be continually prompted to login upon page load.
      FB.login(function(){}, {scope: 'user_likes'});
    } else {
      // In this case, the person is not logged into Facebook, so we call the login() 
      // function to prompt them to do so. Note that at this stage there is no indication
      // of whether they are logged into the app. If they aren't then they'll see the Login
      // dialog right after they log in to Facebook. 
      // The same caveats as above apply to the FB.login() call here.
      FB.login(function(){}, {scope: 'user_likes'});
    }
  });
  };

  // Load the SDK asynchronously
  (function(d){
   var js, id = 'facebook-jssdk', ref = d.getElementsByTagName('script')[0];
   if (d.getElementById(id)) {return;}
   js = d.createElement('script'); js.id = '581889635235526'; js.async = true;
   js.src = "//connect.facebook.net/en_US/all.js";
   ref.parentNode.insertBefore(js, ref);
  }(document));

  // Here we run a very simple test of the Graph API after login is successful. 
  // This testAPI() function is only called in those cases. 
  function retrieveMusic() {
    $('#message').text('Welcome!  Fetching your information.... ');
    $("body").css("cursor","progress");

    FB.api('/me/music', function(response) {
      $("body").css("cursor","auto");
      $("#message").text("Music favourites loaded!");
      var names = response.data.map(function(like){return like.name});
      console.log(JSON.stringify(names));
      var name_table = "<table>" + names.map(function(name){return '<tr><td>'+name+'</td></tr>';}).join("\n") + '</table>';
      $('div.focus').html(name_table);
    });
  };
</script>

<div class="centered"><div><p id="message"></p></div><br/>
<div class="focus"><img height="150px" src="img/Erato-wikipedia.jpg"></div><br><br><br>
<div class="fb-login-button" data-max-rows="1" data-size="xlarge" data-show-faces="false" data-auto-logout-link="true"></div></div>
</body>
</html>